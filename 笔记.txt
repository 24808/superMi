前端跨域
//浏览器卫龙安全做出的限制策略
//请求同源策略: 同域名 同端口 同协议
1.CORS跨域 - 服务端设置，前端直接调用
后台允许前端某个战斗进行访问
2.JSONP跨域
3.代理跨域

请求
 "axios": "^0.20.0",
 ui
    "element-ui": "^2.13.2",
    "jsonp": "^0.2.1",
    统一设置样式
    "node-sass": "^4.14.1",
    "sass-loader": "^10.0.2",
    //轮播组件
    "vue-awesome-swiper": "^4.1.1",
    更好的使用axios
    "vue-axios": "^2.1.5",
    前后端交互
    "vue-cookie": "^1.1.4",
    图片懒加载
    "vue-lazyload": "^1.3.3",
    "vue-template-compiler": "^2.6.11"

    这个项目的右路只能放在最外层，routes.js
    router/index.js识别不出
    导入
    import Vue from "vue"
import Router from 'vue-router';
和路由对应的模块
    // 1/安装插件
Vue.use(Router);
导出
export default new  Router){
  设置路由
  routes:[{
    path: "/",
      name: "home",
      component: home,
      redirect: '/index',
      // 子路由
       children: [{
          path: "/index",
          name: "index",
          component: index,
        },]
  } 
     
}
cookie \sessionStorage\Storage的区别
cookie 4k  服务器
Storage 5m 浏览器
package设置环境变量 ；例:--mode=development
axios请求
//原始人用法
    Axios.get("/mock/user/login.json")
      .then(function(response) {
        console.log(response);
      })
      .catch(function(error) {
        console.log(error);
      });

统一位置
//这里进行请求动作
import { mock } from "./network/mock";
        mock().then((res) => {
      this.data = res;
    });
//这里设置请求
    import {
  request
} from "./request"

export function mock() {
  return request({
    url: "/mock/user/login.json",
    method: "get"
  })
}
//发送请求
export function request(config) {
  let instance = axios.create({
    // baseURL: "http://123.207.32.32:8000/api/x6/",
  
    timeout: 5000,
  })
  return instance(config);
}
import和require的区别
import 预编译加载，一开始就加载
require执行时才加载，栏加载



scss的使用
样式的嵌套
使用&:hour $:after等表示选择器
@mixin 使用@mixin关建字可以把样式抽离成函数使用
反向代理
配置文件 vue.config.js
对url进行配置，需要后端设置

过滤器的使用
一般对值进行转化或筛选,比如金额/时间
fiter{
  guo(value){
    return "s"+value
  }
}
value |guo过滤器

    
//行内样式背景和文字不对称，:vertical-align: middle行内样式垂直居中

//补充知识：待学习
Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入/离开过渡
过渡的类名
在进入/离开的过渡中，会有 6 个 class 切换。
v-enter：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。
v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。
v-enter-to：2.1.8 版及以上定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除。
v-leave：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。
v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。
v-leave-to：2.1.8 版及以上定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除。

图片懒加载的安装
npm i vue-lazyload -s

//调试
ctRl P 浏览器控制台sources力搜索文件
或者debug
路由的传参
query传参用路径，
params传参用路由设置的name

//路由懒加载
const home = () =>
    import ("./view/Home/home");